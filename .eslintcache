[{"C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\index.js":"1","C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\App.js":"2","C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\Food.js":"3","C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\Snake.js":"4"},{"size":376,"mtime":1612452021143,"results":"5","hashOfConfig":"6"},{"size":5603,"mtime":1613137662281,"results":"7","hashOfConfig":"6"},{"size":297,"mtime":1613076176013,"results":"8","hashOfConfig":"6"},{"size":691,"mtime":1613076180609,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mqts7h",{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\index.js",[],"C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\App.js",["21","22","23","24","25","26"],"import React, { Component } from 'react';\nimport Snake from './Snake'; //importeert alle info uit snake.js\nimport Food from './Food'; //importeert alle info uit snake.js\n\nconst getRandomCoordinates = () => { // arrowfunction wordt gemaakt voor random positie \n  let min = 1; //2 integers tussen 1-98 tot waar die maximaal en minimaal word gerenderd\n  let max = 98; //let word gebruikt om het alleen bruikbaar te maken in deze code block  // these can be consts\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2; \n  let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = { //food cordinate in de state (dit wordt random gedaan)\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT', //direction start me right \n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\n //elke snake dote heeft een eigen unieke coridinate die voortbewegen in classname snake dot \nclass App extends Component { //start van class //class base component\n\n  state = initialState;\n\n  componentDidMount() { // eerste keer dat component ready zal zijn aka mounted\n    setInterval(this.moveSnake, this.state.speed); //opnieuw iets laten zien op het scherm voor een aantal tijd \n\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() { //met 1 van deze 3 mogelijke gebeurtenissen kan het game over zijn. Hier word er nagekeken of 1 van deze mogelijkheden daadwerkerlijk gebeuren\n    this.checkIfOutOfBorders(); //met this word method aangeroepen om dit na te kijken. \n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => { //arrow function onkeydown\n    e = e || window.event;\n    switch (e.keyCode) { //switch case voor alle keys \n      case 38:\n        this.setState({direction: 'UP'}); //in het geval dat kuy 38 (up) wordt gebruikt gaat de snake naar boven\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'}); //zelfde\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n    }\n  }\n\n  moveSnake = () => { //in deze arrowfunction word de illusie gemaakt hoe de snake zich voort beweeegt\n\n    // neem snake poisiton voordat het zich voort beweegt\n    let dots = [...this.state.snakeDots]; //state die alle puntjes bewaart van snake \n    let head = dots[dots.length - 1]; //head vinden \n\n  \n    //berekent nieuwe positie van de snake op basis van elke key die wordt gebruikt\n    switch (this.state.direction) { //switch case voor elke direction en dan word elke kant berekent\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]]; //op het moment dat je naar rechts gaat schuift de head 1 kant op\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]]; //voor elke mogelijke kant wordt er een berekening gemaakt \n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2]; //head positie, .. , plus \n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n\n    //update snake position and commit nieuwe positie in de react 'state'\n    dots.push(head); //duwt de hoofd naar een nieuwe positie \n    dots.shift(); //shift method om de eerste item uit de array te halen. dit shift en push method moeten allebij uitgevoerd worden om de illusie zijn werk te laten doen.\n  }\n\n  checkIfOutOfBorders() { // start van method. checkt of de cordinaten binnen de game area zitten\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1]; //set let variabele //get where the head is  \n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) { // met deze if statement kun je een berekenen of de snake uit de border is geweest dan is het game over. 0=x position and x = y position\n      this.onGameOver(); //method gets called om de game te laten stoppen. deze method worden beneden aangemaakt. \n    }\n  }\n\n  checkIfCollapsed() { //nakijken of snake zichzelf heeft geraakt.\n    let snake = [...this.state.snakeDots]; //positie van snake\n    let head = snake[snake.length - 1]; \n    snake.pop(); //snake pop methode om head te verwijderen\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) { // if statement om te kijken of hoofd zichzelf raakt\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() { //als de snake het eten heeft gegeten wordt er een stukje aan het einde van de staart toegevoegd. De array incremment op dit moment.\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() { //snelheid word ge increment\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`); //alert geeft aan dat het game over is en haalt de gegevens op met ths.state om te laten wat je highscore is :)\n    this.setState(initialState) //this state word aangeroepen\n  }\n\n  render() { //renderd 2 react components, geeft props door aan snake met snake dots en geeft food in food props\n    return (\n      <div className=\"game-area\"> \n        <Snake snakeDots={this.state.snakeDots}/> \n        <Food dot={this.state.food}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\Food.js",["27"],"import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  const style = {\r\n    left: `${props.dot[0]}%`, //x cordinate\r\n    top: `${props.dot[1]}%` //y cordinate\r\n  }\r\n\r\n  return (\r\n    <div className=\"snake-food\" style={style}></div> //food wordt gerenderd met classename snake-food.\r\n  )\r\n}","C:\\Users\\amina\\Documents\\GLU\\leerjaar2\\periode 6\\javascript\\reactgame\\reactjs\\src\\Snake.js",["28"],"import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => { //map method wordt gebruikt om door de dots van de snake te loopen \r\n        const style = {\r\n          left: `${dot[0]}%`, //x cordinate\r\n          top: `${dot[1]}%` //y cordinate \r\n        }\r\n        return (\r\n          <div className=\"snake-dot\" key={i} style={style}></div> //jsx code word getranslate naar javascript zodat de brower het kan lezen. Hier word de snake parts ingeladen en laten zien. Het neem de cordinaten en zet het in de juist positie\r\n          //takes snake dots position as props and then render them.\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}",{"ruleId":"29","severity":1,"message":"30","line":41,"column":5,"nodeType":"31","messageId":"32","endLine":54,"endColumn":6},{"ruleId":"29","severity":1,"message":"30","line":65,"column":5,"nodeType":"31","messageId":"32","endLine":78,"endColumn":6},{"ruleId":"33","severity":1,"message":"34","line":97,"column":19,"nodeType":"35","messageId":"36","endLine":97,"endColumn":21},{"ruleId":"33","severity":1,"message":"34","line":97,"column":40,"nodeType":"35","messageId":"36","endLine":97,"endColumn":42},{"ruleId":"33","severity":1,"message":"34","line":106,"column":17,"nodeType":"35","messageId":"36","endLine":106,"endColumn":19},{"ruleId":"33","severity":1,"message":"34","line":106,"column":39,"nodeType":"35","messageId":"36","endLine":106,"endColumn":41},{"ruleId":"37","severity":1,"message":"38","line":3,"column":1,"nodeType":"39","endLine":13,"endColumn":2},{"ruleId":"37","severity":1,"message":"38","line":3,"column":1,"nodeType":"39","endLine":18,"endColumn":2},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration"]